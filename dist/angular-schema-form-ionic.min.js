/*!
 * angular-schema-form-ionic
 * @version 1.1.0
 * @date Wed, 20 Sep 2017 04:13:47 GMT
 * @link https://github.com/jessehon/angular-schema-form-ionic
 * @license MIT
 * Copyright (c) 2014-2017 JSON Schema Form
 */
!function(e){function n(s){if(r[s])return r[s].exports;var l=r[s]={i:s,l:!1,exports:{}};return e[s].call(l.exports,l,l.exports,n),l.l=!0,l.exports}var r={};n.m=e,n.c=r,n.i=function(e){return e},n.d=function(e,r,s){n.o(e,r)||Object.defineProperty(e,r,{configurable:!1,enumerable:!0,get:s})},n.n=function(e){var r=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(r,"a",r),r},n.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},n.p="",n(n.s=18)}([function(e,n,r){r(12)},function(e,n){var r="/ionic/array.html";window.angular.module("ng").run(["$templateCache",function(e){e.put(r,'<div  class="list schema-form-array {{::form.htmlClass + \' \' + idClass}}"\n      sf-field-model="sf-new-array"\n      sf-new-array>\n\n  <div class="item item-divider" ng-show="showTitle()">\n    {{ form.title }}\n  </div>\n\n  <div sf-field-model>\n    <div  class="list list-inset {{::form.fieldHtmlClass}}"\n          sf-field-model="ng-repeat"\n          ng-repeat="item in $$value$$ track by $id(trackBy(item, index))">\n\n      <div  schema-form-array-items\n            sf-key-controller\n            sf-parent-key="[{{form.key.join(\'][\')}}]"\n            sf-index="{{$index}}">\n      </div>\n\n      <button ng-hide="form.readonly || form.remove === null"\n          ng-click="deleteFromArray(item)"\n          type="button"\n          class="button icon-left ion-close {{ form.style.remove || \'button-block\' }}">\n        {{ form.remove || \'Remove\'}}\n      </button>\n    </div>\n  </div>\n\n  <div class="padding" ng-model="modelArray" schema-validate="form">\n    <p class="help-block"\n         ng-show="(hasError() && errorMessage(schemaError())) || form.description"\n         ng-bind-html="(hasError() && errorMessage(schemaError())) || form.description">\n    </p>\n\n    <button ng-hide="form.readonly || form.add === null"\n            ng-click="appendToArray()"\n            ng-disabled="form.schema.maxItems <= modelArray.length"\n            type="button"\n            class="button icon-left ion-plus {{ form.style.add || \'button-block\' }}">\n      {{ form.add || \'Add\'}}\n    </button>\n  </div>\n</div>\n')}]),e.exports=r},function(e,n){var r="/ionic/button.html";window.angular.module("ng").run(["$templateCache",function(e){e.put(r,'<div class="schema-form-button {{::form.htmlClass + \' \' + idClass}}">\n    <button class="button {{ form.style }} {{::form.fieldHtmlClass}}"\n            type="button"\n            ng-click="buttonClick($event, form)"\n            ng-disabled="form.readonly">\n      <span ng-if="form.icon" class="{{form.icon}}"></span>\n      {{form.title}}\n    </button>\n  </div>\n')}]),e.exports=r},function(e,n){var r="/ionic/checkbox.html";window.angular.module("ng").run(["$templateCache",function(e){e.put(r,'<label  for="{{::fieldId(true, false)}}"\n        class="item item-checkbox schema-form-{{form.type}} {{::form.htmlClass + \' \' + idClass}}"\n        ng-class="{\n          \'has-error\': form.disableErrorState !== true && hasError(),\n          \'has-success\': form.disableSuccessState !== true && hasSuccess(),\n          \'has-feedback\': form.feedback !== false,\n          \'required\': form.required === true\n        }">\n  <div class="checkbox checkbox-input-hidden disable-pointer-events">\n    <input  type="checkbox"\n            sf-changed="form"\n            ng-disabled="form.readonly"\n            sf-field-model\n            schema-validate="form"\n            class="{{::form.fieldHtmlClass}}"\n            name="{{::fieldId(true, false)}}">\n    <i class="checkbox-icon"></i>\n  </div>\n\n  <div  class="item-content disable-pointer-events {{form.labelHtmlClass}}"\n        ng-bind-html="form.title">\n  </div>\n\n  \x3c!-- Help block for help text and error message --\x3e\n  <p class="help-block" sf-message="form.description"></p>\n</label>\n')}]),e.exports=r},function(e,n){var r="/ionic/default.html";window.angular.module("ng").run(["$templateCache",function(e){e.put(r,'<label  for="{{::fieldId(true, false)}}"\n        class="item item-input {{::form.htmlClass + \' schema-form-\' + form.type + \' \' + idClass}}"\n        ng-class="{\n          \'has-error\': form.disableErrorState !== true && hasError(),\n          \'has-success\': form.disableSuccessState !== true && hasSuccess(),\n          \'has-feedback\': form.feedback !== false,\n          \'required\': form.required === true\n        }">\n\n  <span ng-show="showTitle()"\n        class="input-label {{::form.labelHtmlClass}}">\n    {{form.title}}\n  </span>\n\n  <input ng-show="::form.key"\n         type="{{::form.type}}"\n         step="any"\n         sf-changed="form"\n         placeholder="{{::form.placeholder}}"\n         class="{{::form.fieldHtmlClass}}"\n         id="{{::fieldId(true, false)}}"\n         sf-field-model\n         ng-disabled="form.readonly"\n         schema-validate="form"\n         name="{{::fieldId(true, false)}}"\n         aria-describedby="{{::fieldId(true, false) + \'-status\'}}">\n\n  \x3c!-- Help block for help text and error message --\x3e\n  <p class="help-block" sf-message="form.description"></p>\n</label>\n')}]),e.exports=r},function(e,n){var r="/ionic/fieldset.html";window.angular.module("ng").run(["$templateCache",function(e){e.put(r,'<fieldset ng-disabled="form.readonly"\n          class="schema-form-fieldset {{::form.htmlClass + \' \' + idClass}}">\n  <div ng-show="showTitle()" class="item item-divider">\n    {{ form.title }}\n  </div>\n\n  \x3c!-- Help block for help text and error message --\x3e\n  <p class="help-block" ng-show="form.description" ng-bind-html="form.description"></p>\n</fieldset>\n')}]),e.exports=r},function(e,n){var r="/ionic/radios.html";window.angular.module("ng").run(["$templateCache",function(e){e.put(r,'<div  class="list schema-form-radios {{::form.htmlClass + \' \' + idClass}}"\n      ng-class="{\n        \'has-error\': form.disableErrorState !== true &&  hasError(),\n        \'has-success\': form.disableSuccessState !== true && hasSuccess(),\n        \'required\': form.required === true\n      }">\n\n  <label class="item item-radio" ng-repeat="tm in form.titleMap">\n    <input type="radio"\n           class="{{form.fieldHtmlClass}}"\n           sf-changed="form"\n           ng-disabled="form.readonly"\n           sf-field-model\n           ng-value="tm.value"\n           name="{{::fieldId(true, false)}}">\n\n    <div class="radio-content">\n      <div class="item-content disable-pointer-events {{::form.labelHtmlClass}}"\n           ng-bind-html="tm.name">\n      </div>\n      <i class="radio-icon disable-pointer-events icon ion-checkmark"></i>\n    </div>\n\n    \x3c!-- Help block for help text and error message --\x3e\n    <p class="help-block" sf-message="form.description"></p>\n  </label>\n\n</div>\n')}]),e.exports=r},function(e,n){var r="/ionic/section.html";window.angular.module("ng").run(["$templateCache",function(e){e.put(r,'<div  class="schema-form-section {{::form.htmlClass + \' \' + idClass}}"\n      sf-key-controller\n      sf-parent-key="[{{form.key.join(\'][\')}}]"\n      sf-index="{{$index}}">\n</div>\n')}]),e.exports=r},function(e,n){var r="/ionic/select.html";window.angular.module("ng").run(["$templateCache",function(e){e.put(r,'<label  class="item item-input item-select schema-form-select {{::form.htmlClass + \' \' + idClass}}"\n        for="{{::fieldId(true, false)}}"\n        ng-class="{\n          \'has-error\': form.disableErrorState !== true && hasError(),\n          \'has-success\': form.disableSuccessState !== true && hasSuccess(),\n          \'has-feedback\': form.feedback !== false,\n          \'required\': form.required === true\n        }">\n\n  <div class="input-label {{form.labelHtmlClass}}" ng-show="showTitle()">\n    {{form.title}}\n  </div>\n\n  <select sf-field-model\n          id="{{::fieldId(true, false)}}"\n          ng-disabled="form.readonly"\n          sf-changed="form"\n          class="{{::form.fieldHtmlClass}}"\n          schema-validate="form"\n          ng-options="item.value as item.name group by item.group for item in form.titleMap"\n          name="{{::fieldId(true, false)}}">\n  </select>\n\n  \x3c!-- Help block for help text and error message --\x3e\n  <p class="help-block" sf-message="form.description"></p>\n</label>\n')}]),e.exports=r},function(e,n){var r="/ionic/submit.html";window.angular.module("ng").run(["$templateCache",function(e){e.put(r,'<div class="schema-form-submit {{::form.htmlClass + \' \' + idClass}}">\n  <input type="submit"\n         class="button {{ form.style || \'button-positive\' }} {{::form.fieldHtmlClass}}"\n         value="{{form.title}}"\n         ng-disabled="form.readonly">\n</div>\n')}]),e.exports=r},function(e,n){var r="/ionic/textarea.html";window.angular.module("ng").run(["$templateCache",function(e){e.put(r,'<label  class="item item-input {{::form.htmlClass + \' \' + idClass}} schema-form-textarea"\n        for="{{::fieldId(true, false)}}"\n        ng-class="{\n          \'has-error\': form.disableErrorState !== true && hasError(),\n          \'has-success\': form.disableSuccessState !== true && hasSuccess(),\n          \'has-feedback\': form.feedback !== false,\n          \'required\': form.required === true\n        }">\n\n  <span ng-show="showTitle()"\n        class="input-label {{::form.labelHtmlClass}}">\n    {{form.title}}\n  </span>\n\n  <textarea class="{{::form.fieldHtmlClass}}"\n            id="{{::fieldId(true, false)}}"\n            sf-changed="form"\n            ng-attr-placeholder="{{::form.placeholder}}"\n            ng-disabled="form.readonly"\n            sf-field-model\n            schema-validate="form"\n            name="{{::fieldId(true, false)}}"></textarea>\n\n  \x3c!-- Help block for help text and error message --\x3e\n  <p class="help-block" sf-message="form.description"></p>\n</label>\n')}]),e.exports=r},function(e,n){var r="/ionic/toggle.html";window.angular.module("ng").run(["$templateCache",function(e){e.put(r,'<div  class="item item-toggle schema-form-toggle {{::form.htmlClass + \' \' + idClass}}"\n      ng-class="{\n        \'has-error\': form.disableErrorState !== true && hasError(),\n        \'has-success\': form.disableSuccessState !== true && hasSuccess(),\n        \'has-feedback\': form.feedback !== false,\n        \'required\': form.required === true\n      }">\n\n  <div class="{{::form.labelHtmlClass}}">\n    {{form.title}}\n  </div>\n\n  <label  for="{{::fieldId(true, false)}}"\n          class="toggle">\n\n    <input type="checkbox"\n           sf-changed="form"\n           ng-disabled="form.readonly"\n           sf-field-model\n           schema-validate="form"\n           class="{{::form.fieldHtmlClass}}"\n           name="{{::fieldId(true, false)}}">\n\n    <div class="track">\n      <div class="handle"></div>\n    </div>\n\n  </label>\n\n  \x3c!-- Help block for help text and error message --\x3e\n  <p class="help-block" sf-message="form.description"></p>\n</div>\n')}]),e.exports=r},function(e,n,r){"use strict";function s(e,n,r,s,l){var a=r.builders.simpleTransclusion,i=r.builders.ngModelOptions,m=r.builders.ngModel,f=r.builders.sfField,p=r.builders.condition,b=r.builders.array,v=(r.builders.numeric,function(e){if(e.form.placeholder){var n=e.fieldFrag.querySelector("select"),r=document.createElement("option");r.setAttribute("value",""),r.setAttribute("sf-field-model","replaceAll"),1===angular.version.major&&angular.version.minor<4?r.setAttribute("ng-if","$$value$$ === undefined"):r.setAttribute("ng-show","$$value$$ === undefined"),r.textContent=e.form.placeholder,n.appendChild(r)}}),y=[f,m,i,p];n.defineDecorator("ionicDecorator",{array:{template:t.a,builder:[f,i,m,b,p]},button:{template:o.a,builder:y},checkbox:{template:d.a,builder:y},default:{template:c.a,builder:y},fieldset:{template:u.a,builder:[f,a,p]},radios:{template:h.a,builder:y},section:{template:g.a,builder:[f,a,p]},select:{template:x.a,builder:[v].concat(y)},submit:{template:k.a,builder:y},textarea:{template:w.a,builder:y},toggle:{template:S.a,builder:y}},[])}Object.defineProperty(n,"__esModule",{value:!0});var l=r(1),t=r.n(l),a=r(2),o=r.n(a),i=r(3),d=r.n(i),m=r(4),c=r.n(m),f=r(5),u=r.n(f),p=r(6),h=r.n(p),b=r(7),g=r.n(b),v=r(8),x=r.n(v),y=r(9),k=r.n(y),C=r(10),w=r.n(C),$=r(11),S=r.n($);angular.module("schemaForm").config(s),s.$inject=["schemaFormProvider","schemaFormDecoratorsProvider","sfBuilderProvider","sfPathProvider","$injector"]},,,,,,function(e,n,r){e.exports=r(0)}]);